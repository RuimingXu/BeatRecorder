CSCB58 Project Report: Winter 2019

Team Member A
-------------
First Name: Muhammad
Last Name: Ali
Student Number: 1003939642
UofT E-mail Address: moyo.ali@mail.utoronto.ca


Team Member B
-------------
First Name: Ruiming
Last Name: Xu
Student Number: 1003905624
UofT E-mail Address: ruiming.xu@mail.utoronto.ca


Project Plan
--------

Project Title: Beat Recorder 3000


Provide a one paragraph description of your project:
	'Beat Recorder 3000' is an electronic keyboard that plays various drums, piano rythms and other sounds in order to
	make a beat or play some music! The best part? You can store and record your beats and use them to save a sick rythm you
	come up with or even use them as backdrop/instrumental for a new piece you wish to compose. To do this, you would need
	to select a switch in which to store your beat, click the record key, start playing your beat by hitting keys on the
	keyboard, then click the record key again to stop recording! 'Beat Recorder" will hold onto your beat temporarily, then
	either delete it if you hit the delete key or save it in the switch you selected if you click the save key. Now you can
	access/play that sick beat anytime when you use that switch! You can also write over pre-written beats!

What is your plan for the first week?
	- Compile audio sounds needed
	- Create keyboard keys/input to play audio tracks
	- Set up FSM and data path to move between audio channels and sounds per key chosen
	- Set up audio device to output tracks/sounds (connect to FPGA board)
	- ^ Finish music player/instrument aspect of project

What is your plan for the second week?
	- Set up keys to record, delete and save
	- Create flip flops to save a track
	- Create max memory allocation (# key presses + length) for flip-flops
	- Set up switches to point to/store a specific pattern/rhythem if present
	- ^ Finish recorder aspect of project

What is your plan for the third week?
	- Finish tasks that were pushed over to this week (or didnt work last week)
	- Debug all errors that were mulled over/ignored in prior weeks
	- Test/play with the project (make sure all features work)
	- Add design features (lights display, start up sounds)
	(- Add visual display that shows all keys beats/rythems, time allowing)

What is your backup plan if things donâ€™t work out as planned?
	- If keys become complicated, buckle down to using a smaller amount
	- If using keyboard keys becomes too difficult, ^ (way smaller) on FPGA board switches
	- If unable to use compputer's audio, find/request compatible speaker
	- Drastic measure: If unable to find any speaker/get speakers to work, switch to making
		a visual VGA display (ie, a pattern recognizer and repeater instead of audio recorder).
	- If time-limited for flip flop beats, only store keys pressed and not length as well.

Weekly Reports
--------------
Week 1:
	We created a repository with all necessary folders and preliminary documents.
	Created a state diagram and model for how we wish to accomplish project requirements.
	Created modules to: - translate/parse input from keyboard to FPGA board
	                    - rate divider modules to send/create appropriate frequency rate to buzzer
	                    - main, top and player modules to isolate project segments (to make week 2 integration easier, as well as testing)
	                    - a visual display module (to see notes being played on Hex display)
	Tested, compiled and fixed modules on the DE2 board in lab:
		- keyboard input was well recieved, note display worked as desired
		- rate divider worked as wanted, the appropriate notes were being assigned
		- A MAJOR ISSUE: The keyboard input constantly sends a new value (even if it is same as last pressed item).
		This stops the rate divider from ever reaching 0 (switching from 1) as it is always reassigned new counter value
			- We realized we needed a seperate counter that didn't rely on the keyboards input -> Implemented a new var
			that switched from posedge to negedge to do this.
				- Time was limited, so we didn't get to test these changes. We will continue to edit and monitor it.
	Also created (didn't test FSM module -> To lessen the heavy burden of next week's workload.

Week 2:
	We met earlier in the week and debugged our prior code to get the buzzer working.
	We realized we didn't know how to connect the GPIO inputs so we switched to LEDG (from audio testing -> visual testing).
	The green light probed at different rated based on input-> Code from prior week was working! (This was a huge success).
	During the week then, 
	we created modules to: - detect when to load or store beats from switches/input (finished FSM)
						   - redirect inputs and outputs based on what needs to be recorded and when (Datapath for recorder)
	                       - created two modules: to store ascii and note length to a text file, and another to read it
						   and output it to the respective memory buzzer.
	                       - Finally, we moved RateDivider to its own segment and also created a version of ratedivider that didnt
						   do visual output (for the memory buzzers)
	Tested, compiled and fixed modules on the DE2 board in lab:
		- We spent some time figuring out how to use breadboard and pin connections. Were able to
		successfully test our prior code (Auditorally instead of visually!). We now know how to set up
		the final product physically.
		- all the modules loaded and worked EXCEPT
		- A MAJOR ISSUE: The researched File I/O for Verilog was unsupported by Quartus! Our
		choices are: -use ModuleSim and figure out how to store file to SRAM or to create an artifical ram.
		We chose to create an artificial ram similar to lab6 and test it with this on Monday. We will also
		see if we can get the File I/O running at that time.
		

Week 3:
	- This week we created the following modules:
			- a RAM handler (from template of a given lab)
			- a module that stores a new key/note pressed into an address in the RAM memory to playback later.
			- a module to iterate through addresses of a given address pointer and load its values from RAM.
	Note that, for the above module, we modified it to only play each stored key/note for 1 second,
	because we didnt have time. This was one of our backup plans and was expected.
	Furthermore, we had to edit the following modules:
		- The main module needed to call the address storing and loading modules now, in case there was
		a desire to load values or store them. It also needed to be able to access the RAM and get this info.
		All of this was added to the main module.
		- The FSM had to be updated with fewer parameters (4) since the RAM will only load or store 
		(and do this only for A or B now).
	- We planned on wrapping everything up this week but weren't able to. 
	Everything we did seemed to work as wanted, except that the storing module has an error on its "else" case
	that we dont understand why it is occuring.
	- We believe/hope that coming in for an hour and two will let us fix this for it (and also make
	sure it doesn't occur in the loading module), then we should be ready to present next week.
	



References
----------
- ASIC Notepad-- (https://github.com/armitag8/ASIC_Notepad--/tree/master/src)
	* Source code for keyboard input was referred to in order to figure out how to implement PS2 keyboard notes.
	  Relevant items were used: Detecting keyboard clock and data signal allocating to keys.
	  Keyboard input was buffed down to the keys needed to play buzzer sounds, and ascii return values were edited
	  to be more relevant to the music_player, etc. modules.
- DE2 Keyboard-- (https://github.com/ItsMeWithTheFace/DE2Keyboard)
	* Source code for keyboard input was referred to, only for two purposes:
		- To recall how the buzzer hums its beat (switching from 0 to 1, how)
		- To understand how GPIO works (how to connect pins for it to buzzer)
	  



Repo & Video
------------
Repo:
	- https://github.com/moyoonthego/Beat-Recorder-3000
Video:
	- N/A yet

